{"ast":null,"code":"var _jsxFileName = \"/Users/hayungyoo/project/konfold_front/src/pages/Reference/HowAlpha.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HowAlpha() {\n  const Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f7f7f7 ;\n  max-width: 80%;\n  margin: 0 auto;\n`;\n  function Span(_ref) {\n    let {\n      space = 20\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        paddingRight: space\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 6\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction_page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"refer-title\",\n      children: \"\\uC0AC\\uC6A9\\uBC95\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-N1\",\n      children: \"1. AlphaFold2 (Ubuntu 22.04)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-N1\",\n      children: \"(1) AlphaFold(.git) cloning\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"git(\\uD504\\uB85C\\uADF8\\uB798\\uBC0D \\uCF54\\uB4DC \\uBC84\\uC804 \\uAD00\\uB9AC \\uD504\\uB85C\\uADF8\\uB7A8) \\uC124\\uCE58\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ which git  //git \\uC124\\uCE58\\uC5EC\\uBD80 \\uD655\\uC778\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), \"$ sudo apt install git //git \\uC124\\uCE58\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"AlphaFold \\uD074\\uB85C\\uB2DD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ mkdir /[filename]\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 8\n      }, this), \"$ cd /[filename]  //AlphaFold2 git\\uB97C \\uC800\\uC7A5\\uD558\\uACE0\\uC790 \\uD558\\uB294 \\uD3F4\\uB354\\uC5D0 \\uC811\\uC18D\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 8\n      }, this), \"$ git clone https://github.com/deepmind/alphafold.git\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-N1\",\n      children: \"(2) Database\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"Aria2(\\uB2E4\\uC911\\uC11C\\uBC84 \\uBA85\\uB839 \\uC904 \\uB2E4\\uC6B4\\uB85C\\uB4DC \\uC720\\uD2F8\\uB9AC\\uD2F0) \\uC124\\uCE58\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ which aria2c  //aria2 \\uC124\\uCE58\\uC5EC\\uBD80 \\uD655\\uC778\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 8\n      }, this), \"$ sudo apt install aria2 //aria2 \\uC124\\uCE58\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"Alphafold/scripts \\uC18D \\uD30C\\uC77C\\uC744 \\uBD88\\uB7EC\\uC640 database\\uB97C \\uB2E4\\uC6B4\\uB85C\\uB4DC(\\uCF54\\uB4DC \\uC218\\uC815 \\uC2DC \\uC120\\uD0DD\\uC801\\uC73C\\uB85C \\uB2E4\\uC6B4\\uB85C\\uB4DC \\uAC00\\uB2A5)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ cd /[filename]/alphafold  //alphafold\\uAC00 \\uD074\\uB85C\\uB2DD\\uB41C \\uD3F4\\uB354\\uB85C \\uC811\\uC18D\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 8\n      }, this), \"//alphafold\\uC640 \\uB2E4\\uB978 \\uD3F4\\uB354\\uC5D0 \\uC800\\uC7A5\\uD558\\uB294 \\uAC83\\uC774 \\uC88B\\uC74C\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 8\n      }, this), \"//reduced_dbs\\uB294 \\uC6A9\\uB7C9 \\uC791\\uC740 \\uBC84\\uC804\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 8\n      }, this), \"$ sudo scripts/download_all_data.sh /[filename]/db/ reduced_dbs\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-N1\",\n      children: \"(3) Docker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"//docker repository\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uAC8C \\uD544\\uC218 \\uD328\\uD0A4\\uC9C0 \\uC124\\uCE58\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this), \"$ sudo apt install apt-transport-https ca-certifiates curl gnupg lsb-release\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), \"//docker\\uC640 \\uC554\\uD638\\uD654 \\uD1B5\\uC2E0\\uC744 \\uC704\\uD55C GPG keyrings \\uCD94\\uAC00\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), \"$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dreamor -o /usr/share/keyrings/docker-archive-keyring.gpg\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), \"//\\uC124\\uCE58\\uD560 \\uC2DC\\uC2A4\\uD15C\\uC5D0 \\uD574\\uB2F9\\uD558\\uB294 docker repository\\uB97C \\uCD94\\uAC00 \\uD6C4 apt update\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), \"$echo \\\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\\\" | sudo tee /etc/apt/sources.list.d/docker.list / /dev/null\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), \"$ sudo apt update\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), \"//docker-ce, docker-ce-cli, containerd.io \\uC124\\uCE58\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this), \"$ sudo apt install docker-ce docker-ce-cli containerd.io\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), \"//docker \\uC124\\uCE58 \\uD655\\uC778 (docker\\uC758 hello-world \\uC2E4\\uD589)\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), \"$ sudo docker run hello-world\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), \"$ sudo apt update //\\uC124\\uCE58 \\uAC00\\uB2A5\\uD55C \\uB3C4\\uAD6C\\uB4E4\\uC758 \\uBAA9\\uB85D\\uC744 \\uAC31\\uC2E0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"(\\uCC38\\uACE0) apt list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"Apt list\\uC5D0 \\uAE30\\uB85D\\uB41C \\uC800\\uC7A5\\uC18C(repository)\\uB4E4\\uC774 apt update \\uC2DC \\uC790\\uB3D9\\uC73C\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8 \\uB41C\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"/etc/apt/sources.list\\uC5D0\\uC11C \\uD655\\uC778 \\uAC00\\uB2A5\\uD558\\uBA70, vi \\uD3B8\\uC9D1\\uAE30 (vi/etc/apt/sources.list)\\uB85C \\uD3B8\\uC9D1\\uAC00\\uB2A5\\uD558\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"docker\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB294 \\uC0AC\\uC6A9\\uC790(\\uD604\\uC7AC \\uCEF4\\uD4E8\\uD130\\uC758 \\uC0AC\\uC6A9\\uC790 \\uACC4\\uC815)\\uB97C \\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ sudo groupadd docker   //\\uC0AC\\uC6A9\\uC790 \\uADF8\\uB8F9\\uC5D0 docker \\uCD94\\uAC00\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 8\n      }, this), \"$ sudo usermod -aG docker $USER //\\uD604\\uC7AC \\uC0AC\\uC6A9\\uC790 \\uACC4\\uC815\\uC744 docker \\uC0AC\\uC6A9\\uC790 \\uADF8\\uB8F9\\uC5D0 \\uCD94\\uAC00\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 8\n      }, this), \"$ newgrp docker   //\\uACC4\\uC815 \\uB85C\\uADF8\\uC544\\uC6C3 \\uD6C4 \\uC7AC\\uB85C\\uADF8\\uC778\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 8\n      }, this), \"//\\uC77C\\uBC18 \\uC0AC\\uC6A9\\uC790\\uB85C\\uC11C \\uB3C4\\uCEE4 \\uC0AC\\uC6A9\\uAC00\\uB2A5\\uC5EC\\uBD80 \\uD655\\uC778 (docker\\uC758 hello-world \\uC2E4\\uD589)\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 8\n      }, this), \"$ docker run hello-world\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-N1\",\n      children: \"(4) \\uADF8\\uB798\\uD53D \\uCC98\\uB9AC \\uC7A5\\uCE58 (GPU) \\uB4DC\\uB77C\\uC774\\uBC84 \\uAD6C\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"GPU \\uC0AC\\uC6A9 \\uAC00\\uB2A5 \\uC5EC\\uBD80 \\uD655\\uC778 (GPU \\uBAA9\\uB85D\\uC774 \\uD45C\\uC2DC\\uB418\\uC9C0 \\uC54A\\uC740 \\uACBD\\uC6B0 \\uB2E4\\uC74C\\uC758 \\uACFC\\uC815\\uC744 \\uB530\\uB978\\uB2E4.)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: \"$ docker run --gpus all nvidia/cuda:11.5.2-base-ubuntu20.04 nvidia-smi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"korean-protein-expaination\",\n      children: \"\\uC0AC\\uC6A9\\uAC00\\uB2A5\\uD55C GPU \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code_page\",\n      children: [\"$ sudo update-pciids\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 8\n      }, this), \"$ lspci | grep VGA\", /*#__PURE__*/_jsxDEV(Span, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }, this), \"\\uC608\\uC2DC \\uACB0\\uACFC: [Geforce RTX 3070 Ti Laptop GPU]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = HowAlpha;\nvar _c;\n$RefreshReg$(_c, \"HowAlpha\");","map":{"version":3,"names":["React","useEffect","useState","axios","Link","styled","jsxDEV","_jsxDEV","HowAlpha","Wrap","div","Span","_ref","space","style","paddingRight","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/hayungyoo/project/konfold_front/src/pages/Reference/HowAlpha.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport styled from 'styled-components';\n\nexport default function HowAlpha() {\n  const Wrap = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f7f7f7 ;\n  max-width: 80%;\n  margin: 0 auto;\n`;\nfunction Span({ space = 20 }){\n\treturn (\n    \t<span style={{ paddingRight: space }}></span>\n    );\n}\n\n\n  return (\n    <div className=\"prediction_page\">\n      <h1 className=\"refer-title\">\n        사용법\n        </h1>\n        <h1 className=\"title-N1\">\n        1. AlphaFold2 (Ubuntu 22.04)\n      </h1>\n      <h1 className=\"title-N1\">\n        (1) AlphaFold(.git) cloning\n      </h1>\n      <h1 className=\"korean-protein-expaination\">\n      git(프로그래밍 코드 버전 관리 프로그램) 설치\t\n       </h1>\n       <div className=\"code_page\">\n       $ which git\t\t//git 설치여부 확인\n        <Span></Span>\n        $ sudo apt install git\t//git 설치\n       </div>\n       <h1 className=\"korean-protein-expaination\">\n       AlphaFold 클로닝\n       </h1>\n       <div className=\"code_page\">\n       $ mkdir /[filename]\n       <Span></Span>\n       $ cd /[filename]\t\t//AlphaFold2 git를 저장하고자 하는 폴더에 접속\n       <Span></Span>\n       $ git clone https://github.com/deepmind/alphafold.git\n\n       </div>\n       <h1 className=\"title-N1\">\n        (2) Database\n      </h1>\n      <h1 className=\"korean-protein-expaination\">\n      Aria2(다중서버 명령 줄 다운로드 유틸리티) 설치\n       </h1>\n       <div className=\"code_page\">\n       $ which aria2c\t\t//aria2 설치여부 확인\n       <Span></Span>\n       $ sudo apt install aria2\t//aria2 설치\n       </div>\n       <h1 className=\"korean-protein-expaination\">\n       Alphafold/scripts 속 파일을 불러와 database를 다운로드(코드 수정 시 선택적으로 다운로드 가능)\n       </h1>\n       <div className=\"code_page\">\n       $ cd /[filename]/alphafold\t //alphafold가 클로닝된 폴더로 접속\n       <Span></Span>\n       //alphafold와 다른 폴더에 저장하는 것이 좋음\n       <Span></Span>\n       //reduced_dbs는 용량 작은 버전\n       <Span></Span>\n       $ sudo scripts/download_all_data.sh /[filename]/db/ reduced_dbs\n\n       </div>\n       <h1 className=\"title-N1\">\n        (3) Docker\n      </h1>\n      <div className=\"code_page\">\n      //docker repository를 사용할 수 있게 필수 패키지 설치\n      <Span></Span>\n      $ sudo apt install apt-transport-https ca-certifiates curl gnupg lsb-release\t\n      <Span></Span>\n      //docker와 암호화 통신을 위한 GPG keyrings 추가\n      <Span></Span>\n      $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dreamor -o /usr/share/keyrings/docker-archive-keyring.gpg\n      <Span></Span>\n      //설치할 시스템에 해당하는 docker repository를 추가 후 apt update\n      <Span></Span>\n      $echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list / /dev/null\n      <Span></Span>\n      $ sudo apt update\n      <Span></Span>\n      //docker-ce, docker-ce-cli, containerd.io 설치\n      <Span></Span>\n      $ sudo apt install docker-ce docker-ce-cli containerd.io\n      <Span></Span>\n      //docker 설치 확인 (docker의 hello-world 실행)\n      <Span></Span>\n      $ sudo docker run hello-world\n      <Span></Span>\n      $ sudo apt update\t//설치 가능한 도구들의 목록을 갱신\n\n       </div>\n       <h1 className=\"korean-protein-expaination\">\n       (참고) apt list\n       </h1>\n       <h1 className=\"korean-protein-expaination\">\n       Apt list에 기록된 저장소(repository)들이 apt update 시 자동으로 업데이트 된다.\n       </h1>\n       <h1 className=\"korean-protein-expaination\">\n       /etc/apt/sources.list에서 확인 가능하며, vi 편집기 (vi/etc/apt/sources.list)로 편집가능하다.\n       </h1>\n       <h1 className=\"korean-protein-expaination\">\n       docker를 사용할 수 있는 사용자(현재 컴퓨터의 사용자 계정)를 추가\n       </h1>\n       <div className=\"code_page\">\n       $ sudo groupadd docker\t\t\t//사용자 그룹에 docker 추가\n       <Span></Span>\n       $ sudo usermod -aG docker $USER\t//현재 사용자 계정을 docker 사용자 그룹에 추가\n       <Span></Span>\n       $ newgrp docker\t\t\t//계정 로그아웃 후 재로그인\n       <Span></Span>\n       //일반 사용자로서 도커 사용가능여부 확인 (docker의 hello-world 실행)\n       <Span></Span>\n       $ docker run hello-world\n\n       </div>\n       <h1 className=\"title-N1\">\n        (4) 그래픽 처리 장치 (GPU) 드라이버 구성\n      </h1>\n      <h1 className=\"korean-protein-expaination\">\n      GPU 사용 가능 여부 확인 (GPU 목록이 표시되지 않은 경우 다음의 과정을 따른다.)\n       </h1>\n       <div className=\"code_page\">\n       $ docker run --gpus all nvidia/cuda:11.5.2-base-ubuntu20.04 nvidia-smi\n       </div>\n       <h1 className=\"korean-protein-expaination\">\n       사용가능한 GPU 확인\n       </h1>\n       <div className=\"code_page\">\n       $ sudo update-pciids\n       <Span></Span>$ lspci | grep VGA\n      <Span></Span>예시 결과: [Geforce RTX 3070 Ti Laptop GPU]\n       </div>\n\n\n\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}